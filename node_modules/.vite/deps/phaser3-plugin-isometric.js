import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/phaser3-plugin-isometric/dist/phaser-plugin-isometric.js
var require_phaser_plugin_isometric = __commonJS({
  "node_modules/phaser3-plugin-isometric/dist/phaser-plugin-isometric.js"(exports, module) {
    module.exports = (function(t) {
      var i = {};
      function e(s) {
        if (i[s]) return i[s].exports;
        var h = i[s] = { i: s, l: false, exports: {} };
        return t[s].call(h.exports, h, h.exports, e), h.l = true, h.exports;
      }
      return e.m = t, e.c = i, e.d = function(t2, i2, s) {
        e.o(t2, i2) || Object.defineProperty(t2, i2, { enumerable: true, get: s });
      }, e.r = function(t2) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      }, e.t = function(t2, i2) {
        if (1 & i2 && (t2 = e(t2)), 8 & i2) return t2;
        if (4 & i2 && "object" == typeof t2 && t2 && t2.__esModule) return t2;
        var s = /* @__PURE__ */ Object.create(null);
        if (e.r(s), Object.defineProperty(s, "default", { enumerable: true, value: t2 }), 2 & i2 && "string" != typeof t2) for (var h in t2) e.d(s, h, (function(i3) {
          return t2[i3];
        }).bind(null, h));
        return s;
      }, e.n = function(t2) {
        var i2 = t2 && t2.__esModule ? function() {
          return t2.default;
        } : function() {
          return t2;
        };
        return e.d(i2, "a", i2), i2;
      }, e.o = function(t2, i2) {
        return Object.prototype.hasOwnProperty.call(t2, i2);
      }, e.p = "/", e(e.s = 3);
    })([function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true });
      var s = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })();
      var h = (function() {
        function t2() {
          var i2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.x = i2, this.y = e2, this.z = s2;
        }
        return s(t2, [{ key: "copyFrom", value: function(t3) {
          return this.setTo(t3.x, t3.y, t3.z);
        } }, { key: "copyTo", value: function(t3) {
          return t3.x = this.x, t3.y = this.y, t3.z = this.z, t3;
        } }, { key: "equals", value: function(t3) {
          return t3.x === this.x && t3.y === this.y && t3.z === this.z;
        } }, { key: "set", value: function(t3, i2, e2) {
          this.x = t3 || 0, this.y = i2 || (0 !== i2 ? this.x : 0), this.z = e2 || (void 0 === i2 ? this.x : 0);
        } }, { key: "setTo", value: function(t3, i2, e2) {
          return this.set(t3, i2, e2);
        } }, { key: "add", value: function(t3, i2, e2) {
          return this.x += t3 || 0, this.y += i2 || 0, this.z += e2 || 0, this;
        } }, { key: "subtract", value: function(t3, i2, e2) {
          return this.x -= t3 || 0, this.y -= i2 || 0, this.z -= e2 || 0, this;
        } }, { key: "multiply", value: function(t3, i2, e2) {
          return this.x *= t3 || 1, this.y *= i2 || 1, this.z *= e2 || 1, this;
        } }, { key: "divide", value: function(t3, i2, e2) {
          return this.x /= t3 || 1, this.y /= i2 || 1, this.z /= e2 || 1, this;
        } }], [{ key: "add", value: function(i2, e2) {
          var s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new t2();
          return s2.x = i2.x + e2.x, s2.y = i2.y + e2.y, s2.z = i2.z + e2.z, s2;
        } }, { key: "subtract", value: function(i2, e2) {
          var s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new t2();
          return s2.x = i2.x - e2.x, s2.y = i2.y - e2.y, s2.z = i2.z - e2.z, s2;
        } }, { key: "multiply", value: function(i2, e2) {
          var s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new t2();
          return s2.x = i2.x * e2.x, s2.y = i2.y * e2.y, s2.z = i2.z * e2.z, s2;
        } }, { key: "divide", value: function(i2, e2) {
          var s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : new t2();
          return s2.x = i2.x / e2.x, s2.y = i2.y / e2.y, s2.z = i2.z / e2.z, s2;
        } }, { key: "equals", value: function(t3, i2) {
          return t3.x === i2.x && t3.y === i2.y && t3.z === i2.z;
        } }]), t2;
      })();
      i.default = h;
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true });
      var s, h = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), o = e(0), n = (s = o) && s.__esModule ? s : { default: s };
      var r = (function() {
        function t2() {
          var i2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, h2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, o2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0, r2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0;
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.x = i2, this.y = e2, this.z = s2, this.widthX = h2, this.widthY = o2, this.height = r2, this._corners = [new n.default(this.x, this.y, this.z), new n.default(this.x, this.y, this.z + this.height), new n.default(this.x, this.y + this.widthY, this.z), new n.default(this.x, this.y + this.widthY, this.z + this.height), new n.default(this.x + this.widthX, this.y, this.z), new n.default(this.x + this.widthX, this.y, this.z + this.height), new n.default(this.x + this.widthX, this.y + this.widthY, this.z), new n.default(this.x + this.widthX, this.y + this.widthY, this.z + this.height)];
        }
        return h(t2, [{ key: "setTo", value: function(t3, i2, e2, s2, h2, o2) {
          return this.x = t3, this.y = i2, this.z = e2, this.widthX = s2, this.widthY = h2, this.height = o2, this;
        } }, { key: "copyFrom", value: function(t3) {
          this.setTo(t3.x, t3.y, t3.z, t3.widthX, t3.widthY, t3.height);
        } }, { key: "copyTo", value: function(t3) {
          return t3.x = this.x, t3.y = this.y, t3.z = this.z, t3.widthX = this.widthX, t3.widthY = this.widthY, t3.height = this.height, t3;
        } }, { key: "size", value: function(i2) {
          return t2.size(this, i2);
        } }, { key: "contains", value: function(i2, e2, s2) {
          return t2.contains(this, i2, e2, s2);
        } }, { key: "containsXY", value: function(i2, e2) {
          return t2.containsXY(this, i2, e2);
        } }, { key: "clone", value: function(i2) {
          return t2.clone(this, i2);
        } }, { key: "intersects", value: function(i2) {
          return t2.intersects(this, i2);
        } }, { key: "getCorners", value: function() {
          return this._corners[0].setTo(this.x, this.y, this.z), this._corners[1].setTo(this.x, this.y, this.z + this.height), this._corners[2].setTo(this.x, this.y + this.widthY, this.z), this._corners[3].setTo(this.x, this.y + this.widthY, this.z + this.height), this._corners[4].setTo(this.x + this.widthX, this.y, this.z), this._corners[5].setTo(this.x + this.widthX, this.y, this.z + this.height), this._corners[6].setTo(this.x + this.widthX, this.y + this.widthY, this.z), this._corners[7].setTo(this.x + this.widthX, this.y + this.widthY, this.z + this.height), this._corners;
        } }, { key: "toString", value: function() {
          return "[{Cube (x=" + this.x + " y=" + this.y + " z=" + this.z + " widthX=" + this.widthX + " widthY=" + this.widthY + " height=" + this.height + " empty=" + this.empty + ")}]";
        } }, { key: "halfWidthX", get: function() {
          return Math.round(0.5 * this.widthX);
        } }, { key: "halfWidthY", get: function() {
          return Math.round(0.5 * this.widthY);
        } }, { key: "halfHeight", get: function() {
          return Math.round(0.5 * this.height);
        } }, { key: "bottom", get: function() {
          return this.z;
        }, set: function(t3) {
          t3 >= this.top ? this.height = 0 : this.height = this.top - t3, this.z = t3;
        } }, { key: "top", get: function() {
          return this.z + this.height;
        }, set: function(t3) {
          t3 <= this.z ? this.height = 0 : this.height = t3 - this.z;
        } }, { key: "backX", get: function() {
          return this.x;
        }, set: function(t3) {
          t3 >= this.frontX ? this.widthX = 0 : this.widthX = this.frontX - t3, this.x = t3;
        } }, { key: "backY", get: function() {
          return this.y;
        }, set: function(t3) {
          t3 >= this.frontY ? this.widthY = 0 : this.widthY = this.frontY - t3, this.y = t3;
        } }, { key: "frontX", get: function() {
          return this.x + this.widthX;
        }, set: function(t3) {
          t3 <= this.x ? this.widthX = 0 : this.widthX = t3 - this.x;
        } }, { key: "frontY", get: function() {
          return this.y + this.widthY;
        }, set: function(t3) {
          t3 <= this.y ? this.widthY = 0 : this.widthY = t3 - this.y;
        } }, { key: "volume", get: function() {
          return this.widthX * this.widthY * this.height;
        } }, { key: "centerX", get: function() {
          return this.x + this.halfWidthX;
        }, set: function(t3) {
          this.x = t3 - this.halfWidthX;
        } }, { key: "centerY", get: function() {
          return this.y + this.halfWidthY;
        }, set: function(t3) {
          this.y = t3 - this.halfWidthY;
        } }, { key: "centerZ", get: function() {
          return this.z + this.halfHeight;
        }, set: function(t3) {
          this.z = t3 - this.halfHeight;
        } }, { key: "randomX", get: function() {
          return this.x + Math.random() * this.widthX;
        } }, { key: "randomY", get: function() {
          return this.y + Math.random() * this.widthY;
        } }, { key: "randomZ", get: function() {
          return this.z + Math.random() * this.height;
        } }, { key: "empty", get: function() {
          return !this.widthX || !this.widthY || !this.height;
        }, set: function(t3) {
          true === t3 && this.setTo(0, 0, 0, 0, 0, 0);
        } }], [{ key: "size", value: function(t3, i2) {
          return null == i2 ? i2 = new n.default(t3.widthX, t3.widthY, t3.height) : i2.setTo(t3.widthX, t3.widthY, t3.height), i2;
        } }, { key: "clone", value: function(i2, e2) {
          return null == e2 ? e2 = new t2(i2.x, i2.y, i2.z, i2.widthX, i2.widthY, i2.height) : e2.setTo(i2.x, i2.y, i2.z, i2.widthX, i2.widthY, i2.height), e2;
        } }, { key: "contains", value: function(t3, i2, e2, s2) {
          return !(t3.widthX <= 0 || t3.widthY <= 0 || t3.height <= 0) && (i2 >= t3.x && i2 <= t3.frontX && e2 >= t3.y && e2 <= t3.frontY && s2 >= t3.z && s2 <= t3.top);
        } }, { key: "containsXY", value: function(t3, i2, e2) {
          return !(t3.widthX <= 0 || t3.widthY <= 0) && (i2 >= t3.x && i2 <= t3.frontX && e2 >= t3.y && e2 <= t3.frontY);
        } }, { key: "containsPoint3", value: function(i2, e2) {
          return t2.contains(i2, e2.x, e2.y, e2.z);
        } }, { key: "containsCube", value: function(t3, i2) {
          return !(t3.volume > i2.volume) && (t3.x >= i2.x && t3.y >= i2.y && t3.z >= i2.z && t3.frontX <= i2.frontX && t3.frontY <= i2.frontY && t3.top <= i2.top);
        } }, { key: "intersects", value: function(t3, i2) {
          return !(t3.widthX <= 0 || t3.widthY <= 0 || t3.height <= 0 || i2.widthX <= 0 || i2.widthY <= 0 || i2.height <= 0) && !(t3.frontX < i2.x || t3.frontY < i2.y || t3.x > i2.frontX || t3.y > i2.frontY || t3.z > i2.top || t3.top < i2.z);
        } }]), t2;
      })();
      i.default = r;
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true }), i.ISOSPRITE = void 0;
      var s = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), h = n(e(0)), o = n(e(1));
      function n(t2) {
        return t2 && t2.__esModule ? t2 : { default: t2 };
      }
      var r = i.ISOSPRITE = "IsoSprite", a = Phaser.GameObjects.Sprite, l = (function(t2) {
        function i2(t3, e2, s2, o2, n2, a2) {
          !(function(t4, i3) {
            if (!(t4 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, i2);
          var l2 = (function(t4, i3) {
            if (!t4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !i3 || "object" != typeof i3 && "function" != typeof i3 ? t4 : i3;
          })(this, (i2.__proto__ || Object.getPrototypeOf(i2)).call(this, t3, e2, s2, n2, a2));
          return l2.type = r, l2._isoPosition = new h.default(e2, s2, o2), l2.snap = 0, l2._isoPositionChanged = true, l2._isoBoundsChanged = true, l2._project(), l2._isoBounds = l2.resetIsoBounds(), l2;
        }
        return (function(t3, i3) {
          if ("function" != typeof i3 && null !== i3) throw new TypeError("Super expression must either be null or a function, not " + typeof i3);
          t3.prototype = Object.create(i3 && i3.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }), i3 && (Object.setPrototypeOf ? Object.setPrototypeOf(t3, i3) : t3.__proto__ = i3);
        })(i2, a), s(i2, [{ key: "_project", value: function() {
          if (this._isoPositionChanged) {
            var t3 = this.scene.sys.settings.map.isoPlugin, i3 = this.scene[t3].projector.project(this._isoPosition), e2 = i3.x, s2 = i3.y;
            this.x = e2, this.y = s2, this.depth = this._isoPosition.x + this._isoPosition.y + 1.25 * this._isoPosition.z, this.snap > 0 && (this.x = Phaser.Math.snapTo(this.x, this.snap), this.y = Phaser.Math.snapTo(this.y, this.snap)), this._isoPositionChanged = this._isoBoundsChanged = true;
          }
        } }, { key: "preUpdate", value: function() {
          a.prototype.preUpdate.call(this), this._project();
        } }, { key: "resetIsoBounds", value: function() {
          void 0 === this._isoBounds && (this._isoBounds = new o.default());
          var t3 = Math.abs(this.scaleX), i3 = Math.abs(this.scaleY);
          return this._isoBounds.widthX = Math.round(0.5 * Math.abs(this.width)) * t3, this._isoBounds.widthY = Math.round(0.5 * Math.abs(this.width)) * t3, this._isoBounds.height = Math.round(Math.abs(this.height) - 0.5 * Math.abs(this.width)) * i3, this._isoBounds.x = this.isoX + this._isoBounds.widthX * -this.originX + 0.5 * this._isoBounds.widthX, this._isoBounds.y = this.isoY + this._isoBounds.widthY * this.originX - 0.5 * this._isoBounds.widthY, this._isoBounds.z = this.isoZ - Math.abs(this.height) * (1 - this.originY) + Math.abs(0.5 * this.width), this._isoBounds;
        } }, { key: "isoX", get: function() {
          return this._isoPosition.x;
        }, set: function(t3) {
          this._isoPosition.x = t3, this._isoPositionChanged = this._isoBoundsChanged = true, this.body && (this.body._reset = true);
        } }, { key: "isoY", get: function() {
          return this._isoPosition.y;
        }, set: function(t3) {
          this._isoPosition.y = t3, this._isoPositionChanged = this._isoBoundsChanged = true, this.body && (this.body._reset = true);
        } }, { key: "isoZ", get: function() {
          return this._isoPosition.z;
        }, set: function(t3) {
          this._isoPosition.z = t3, this._isoPositionChanged = this._isoBoundsChanged = true, this.body && (this.body._reset = true);
        } }, { key: "isoPosition", get: function() {
          return this._isoPosition;
        } }, { key: "isoBounds", get: function() {
          return !this._isoBoundsChanged && this._isoBounds || (this.resetIsoBounds(), this._isoBoundsChanged = false), this._isoBounds;
        } }]), i2;
      })();
      i.default = l;
    }, function(t, i, e) {
      t.exports = e(4);
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true }), i.IsoPhysics = void 0;
      var s = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), h = e(5);
      Object.defineProperty(i, "IsoPhysics", { enumerable: true, get: function() {
        return r(h).default;
      } });
      var o = r(e(9)), n = r(e(2));
      function r(t2) {
        return t2 && t2.__esModule ? t2 : { default: t2 };
      }
      var a = (function() {
        function t2(i2) {
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.scene = i2, this.systems = i2.sys, i2.sys.settings.isBooted || i2.sys.events.once("boot", this.boot, this), this.projector = new o.default(i2, i2.isometricType), Phaser.GameObjects.GameObjectCreator.register("isoSprite", function(t3, i3, e2, s2, h2) {
            return new n.default(this.scene, t3, i3, e2, s2, h2);
          }), Phaser.GameObjects.GameObjectFactory.register("isoSprite", function(t3, i3, e2, s2, h2) {
            var o2 = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0, r2 = new n.default(this.scene, t3, i3, e2, s2, o2);
            return void 0 === h2 ? (this.displayList.add(r2), this.updateList.add(r2)) : h2.add(r2, true), r2;
          });
        }
        return s(t2, [{ key: "boot", value: function() {
        } }], [{ key: "register", value: function(i2) {
          i2.register("IsoPlugin", t2, "isoPlugin");
        } }]), t2;
      })();
      i.default = a;
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true });
      var s = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), h = n(e(0)), o = n(e(6));
      function n(t2) {
        return t2 && t2.__esModule ? t2 : { default: t2 };
      }
      var r = (function() {
        function t2(i2) {
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.scene = i2;
          var e2 = this.scene.sys.settings.map.isoPlugin;
          this.projector = this.scene[e2].projector, this.world = new o.default(this.scene);
        }
        return s(t2, [{ key: "distanceBetween", value: function(t3, i2) {
          return this._dx = t3.x - i2.x, this._dy = t3.y - i2.y, this._dz = t3.z - i2.z, Math.sqrt(this._dx * this._dx + this._dy * this._dy + this._dz * this._dz);
        } }, { key: "distanceToXY", value: function(t3, i2, e2) {
          return this._dx = t3.x - i2, this._dy = t3.y - e2, Math.sqrt(this._dx * this._dx + this._dy * this._dy);
        } }, { key: "distanceToXYZ", value: function(t3, i2, e2, s2) {
          return this._dx = t3.x - i2, this._dy = t3.y - e2, this._dz = t3.z - s2, Math.sqrt(this._dx * this._dx + this._dy * this._dy + this._dz * this._dz);
        } }, { key: "distanceToPointer", value: function(t3, i2) {
          i2 = i2 || this.scene.input.activePointer;
          var e2 = this.projector.unproject(i2.position, void 0, t3.z);
          return e2.z = t3.z, this.anglesToXYZ(t3, e2.x, e2.y, e2.z).r;
        } }, { key: "anglesToXYZ", value: function(t3, i2, e2, s2) {
          var h2 = this.distanceToXYZ(t3, i2, e2, s2);
          return { r: h2, theta: Math.atan2(e2 - t3.y, i2 - t3.x), phi: Math.acos((s2 - t3.z) / h2) };
        } }, { key: "angleToPointer", value: function(t3, i2) {
          i2 = i2 || this.scene.input.activePointer;
          var e2 = this.projector.unproject(i2.position, void 0, t3.z);
          return e2.z = t3.z, this.anglesToXYZ(t3, e2.x, e2.y, e2.z).theta;
        } }, { key: "velocityFromAngles", value: function(t3, i2, e2) {
          return void 0 === i2 && (i2 = Math.sin(Math.PI / 2)), void 0 === e2 && (e2 = 60), new h.default(Math.cos(t3) * Math.sin(i2) * e2, Math.sin(t3) * Math.sin(i2) * e2, Math.cos(i2) * e2);
        } }, { key: "accelerateToXYZ", value: function(t3, i2, e2, s2, h2, o2, n2, r2) {
          void 0 === h2 && (h2 = 60), void 0 === o2 && (o2 = 500), void 0 === n2 && (n2 = 500), void 0 === r2 && (r2 = 500);
          var a = this.anglesToXYZ(t3.body, i2, e2, s2), l = this.velocityFromAngles(a.theta, a.phi, h2);
          return t3.body.acceleration.setTo(l.x, l.y, l.z), t3.body.maxVelocity.setTo(o2, n2, r2), a.theta;
        } }, { key: "moveToXYZ", value: function(t3, i2, e2, s2, h2, o2) {
          void 0 === h2 && (h2 = 60), void 0 === o2 && (o2 = 0), o2 > 0 && (h2 = this.distanceToXYZ(t3.body, i2, e2, s2) / (o2 / 1e3));
          var n2 = this.anglesToXYZ(t3.body, i2, e2, s2), r2 = this.velocityFromAngles(n2.theta, n2.phi, h2);
          return t3.body.velocity.copyFrom(r2), n2.theta;
        } }, { key: "moveToObject", value: function(t3, i2, e2, s2) {
          return this.moveToXYZ(t3, i2.x, i2.y, i2.z, e2, s2);
        } }, { key: "moveToPointer", value: function(t3, i2, e2, s2) {
          e2 = e2 || this.game.input.activePointer;
          var h2 = this.game.iso.unproject(e2.position, void 0, t3.body.z);
          h2.z = t3.body.z, void 0 === i2 && (i2 = 60), void 0 === s2 && (s2 = 0), s2 > 0 && (i2 = this.distanceToXYZ(t3.body, h2.x, h2.y, h2.z) / (s2 / 1e3));
          var o2 = this.anglesToXYZ(t3.body, h2.x, h2.y, h2.z), n2 = this.velocityFromAngles(o2.theta, o2.phi, i2);
          return t3.body.velocity.x = n2.x, t3.body.velocity.y = n2.y, o2.theta;
        } }, { key: "boot", value: function() {
          var t3 = this.scene.sys.events;
          t3.on("update", this.world.update, this.world), t3.on("postupdate", this.world.postUpdate, this.world);
        } }], [{ key: "register", value: function(i2) {
          i2.register("IsoPhysics", t2, "isoPhysics");
        } }]), t2;
      })();
      i.default = r;
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true });
      var s = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), h = l(e(7)), o = l(e(0)), n = l(e(1)), r = l(e(8)), a = e(2);
      function l(t2) {
        return t2 && t2.__esModule ? t2 : { default: t2 };
      }
      var u = Phaser, c = u.GameObjects, d = u.Structs, y = (function() {
        function t2(i2) {
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.bodies = new d.Set();
          var e2 = i2.sys.game.config, s2 = e2.width, h2 = e2.height;
          this.bounds = new n.default(0, 0, 0, 0.5 * s2, 0.5 * s2, h2), this.gravity = new o.default(), this.checkCollision = { up: true, down: true, frontX: true, frontY: true, backX: true, backY: true }, this.OVERLAP_BIAS = 4, this.forceXY = false, this.skipTree = false, this.maxObjects = 10, this.maxLevels = 4, this.octree = new r.default(this.bounds.x, this.bounds.y, this.bounds.z, this.bounds.widthX, this.bounds.widthY, this.bounds.height, this.maxObjects, this.maxLevels), this._overlap = 0, this._maxOverlap = 0, this._velocity1 = 0, this._velocity2 = 0, this._newVelocity1 = 0, this._newVelocity2 = 0, this._average = 0, this._mapData = [], this._result = false, this._total = 0, this._angle = 0, this._dx = 0, this._dy = 0, this._dz = 0;
        }
        return s(t2, [{ key: "enable", value: function(t3) {
          var i2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], e2 = 1;
          if (Array.isArray(t3)) for (e2 = t3.length; e2--; ) t3[e2] instanceof c.Group ? this.enable(t3[e2].children, i2) : (this.enableBody(t3[e2]), i2 && t3[e2].hasOwnProperty("children") && t3[e2].children.length > 0 && this.enable(t3[e2], true));
          else t3 instanceof c.Group ? this.enable(t3.children, i2) : (this.enableBody(t3), i2 && t3.hasOwnProperty("children") && t3.children.length > 0 && this.enable(t3.children, true));
        } }, { key: "enableBody", value: function(t3) {
          return null === t3.body && (t3.body = new h.default(t3), this.bodies.set(t3.body)), t3;
        } }, { key: "setBounds", value: function(t3, i2, e2, s2, h2, o2) {
          this.bounds.setTo(t3, i2, e2, s2, h2, o2);
        } }, { key: "setBoundsToWorld", value: function() {
          var t3 = this.scene.sys.game.config, i2 = t3.width, e2 = t3.height;
          this.bounds.setTo(0, 0, 0, 0.5 * i2, 0.5 * i2, e2);
        } }, { key: "computeVelocity", value: function(t3, i2, e2, s2, h2, o2, n2) {
          return o2 = o2 || 1e4, 1 === t3 && i2.allowGravity ? e2 += (this.gravity.x + i2.gravity.x) * n2 : 2 === t3 && i2.allowGravity ? e2 += (this.gravity.y + i2.gravity.y) * n2 : 3 === t3 && i2.allowGravity && (e2 += (this.gravity.z + i2.gravity.z) * n2), s2 ? e2 += s2 * n2 : h2 && (this._drag = h2 * n2, e2 - this._drag > 0 ? e2 -= this._drag : e2 + this._drag < 0 ? e2 += this._drag : e2 = 0), e2 > o2 ? e2 = o2 : e2 < -o2 && (e2 = -o2), e2;
        } }, { key: "separate", value: function(t3, i2, e2, s2, h2) {
          return !!(t3.enable && i2.enable && this.intersects(t3, i2)) && ((!e2 || false !== e2.call(s2, t3.sprite, i2.sprite)) && (!!h2 || (this.forceXY || Math.abs(this.gravity.z + t3.gravity.z) < Math.abs(this.gravity.x + t3.gravity.x) || Math.abs(this.gravity.z + t3.gravity.z) < Math.abs(this.gravity.y + t3.gravity.y) ? this._result = this.separateX(t3, i2, h2) || this.separateY(t3, i2, h2) || this.separateZ(t3, i2, h2) : this._result = this.separateZ(t3, i2, h2) || this.separateX(t3, i2, h2) || this.separateY(t3, i2, h2), this._result)));
        } }, { key: "intersects", value: function(t3, i2) {
          return !(t3.frontX <= i2.x) && (!(t3.frontY <= i2.y) && (!(t3.x >= i2.frontX) && (!(t3.y >= i2.frontY) && (!(t3.top <= i2.z) && !(t3.z >= i2.top)))));
        } }, { key: "separateX", value: function(t3, i2, e2) {
          return (!t3.immovable || !i2.immovable) && (this._overlap = 0, this._maxOverlap = t3.deltaAbsX() + i2.deltaAbsX() + this.OVERLAP_BIAS, 0 === t3.deltaX() && 0 === i2.deltaX() ? (t3.embedded = true, i2.embedded = true) : t3.deltaX() > i2.deltaX() ? (this._overlap = t3.frontX - i2.x, this._overlap > this._maxOverlap || false === t3.checkCollision.frontX || false === i2.checkCollision.backX ? this._overlap = 0 : (t3.touching.none = false, t3.touching.frontX = true, i2.touching.none = false, i2.touching.backX = true)) : t3.deltaX() < i2.deltaX() && (this._overlap = t3.x - i2.widthX - i2.x, -this._overlap > this._maxOverlap || false === t3.checkCollision.backX || false === i2.checkCollision.frontX ? this._overlap = 0 : (t3.touching.none = false, t3.touching.backX = true, i2.touching.none = false, i2.touching.frontX = true)), 0 !== this._overlap && (t3.overlapX = this._overlap, i2.overlapX = this._overlap, !!(e2 || t3.customSeparateX || i2.customSeparateX) || (this._velocity1 = t3.velocity.x, this._velocity2 = i2.velocity.x, t3.immovable || i2.immovable ? t3.immovable ? i2.immovable || (i2.x += this._overlap, i2.velocity.x = this._velocity1 - this._velocity2 * i2.bounce.x) : (t3.x = t3.x - this._overlap, t3.velocity.x = this._velocity2 - this._velocity1 * t3.bounce.x) : (this._overlap *= 0.5, t3.x = t3.x - this._overlap, i2.x += this._overlap, this._newVelocity1 = Math.sqrt(this._velocity2 * this._velocity2 * i2.mass / t3.mass) * (this._velocity2 > 0 ? 1 : -1), this._newVelocity2 = Math.sqrt(this._velocity1 * this._velocity1 * t3.mass / i2.mass) * (this._velocity1 > 0 ? 1 : -1), this._average = 0.5 * (this._newVelocity1 + this._newVelocity2), this._newVelocity1 -= this._average, this._newVelocity2 -= this._average, t3.velocity.x = this._average + this._newVelocity1 * t3.bounce.x, i2.velocity.x = this._average + this._newVelocity2 * i2.bounce.x), true)));
        } }, { key: "separateY", value: function(t3, i2, e2) {
          return (!t3.immovable || !i2.immovable) && (this._overlap = 0, this._maxOverlap = t3.deltaAbsY() + i2.deltaAbsY() + this.OVERLAP_BIAS, 0 === t3.deltaY() && 0 === i2.deltaY() ? (t3.embedded = true, i2.embedded = true) : t3.deltaY() > i2.deltaY() ? (this._overlap = t3.frontY - i2.y, this._overlap > this._maxOverlap || false === t3.checkCollision.frontY || false === i2.checkCollision.backY ? this._overlap = 0 : (t3.touching.none = false, t3.touching.frontY = true, i2.touching.none = false, i2.touching.backY = true)) : t3.deltaY() < i2.deltaY() && (this._overlap = t3.y - i2.widthY - i2.y, -this._overlap > this._maxOverlap || false === t3.checkCollision.backY || false === i2.checkCollision.frontY ? this._overlap = 0 : (t3.touching.none = false, t3.touching.backY = true, i2.touching.none = false, i2.touching.frontY = true)), 0 !== this._overlap && (t3.overlapY = this._overlap, i2.overlapY = this._overlap, !!(e2 || t3.customSeparateY || i2.customSeparateY) || (this._velocity1 = t3.velocity.y, this._velocity2 = i2.velocity.y, t3.immovable || i2.immovable ? t3.immovable ? i2.immovable || (i2.y += this._overlap, i2.velocity.y = this._velocity1 - this._velocity2 * i2.bounce.y) : (t3.y = t3.y - this._overlap, t3.velocity.y = this._velocity2 - this._velocity1 * t3.bounce.y) : (this._overlap *= 0.5, t3.y = t3.y - this._overlap, i2.y += this._overlap, this._newVelocity1 = Math.sqrt(this._velocity2 * this._velocity2 * i2.mass / t3.mass) * (this._velocity2 > 0 ? 1 : -1), this._newVelocity2 = Math.sqrt(this._velocity1 * this._velocity1 * t3.mass / i2.mass) * (this._velocity1 > 0 ? 1 : -1), this._average = 0.5 * (this._newVelocity1 + this._newVelocity2), this._newVelocity1 -= this._average, this._newVelocity2 -= this._average, t3.velocity.y = this._average + this._newVelocity1 * t3.bounce.y, i2.velocity.y = this._average + this._newVelocity2 * i2.bounce.y), true)));
        } }, { key: "separateZ", value: function(t3, i2, e2) {
          return (!t3.immovable || !i2.immovable) && (this._overlap = 0, this._maxOverlap = t3.deltaAbsZ() + i2.deltaAbsZ() + this.OVERLAP_BIAS, 0 === t3.deltaZ() && 0 === i2.deltaZ() ? (t3.embedded = true, i2.embedded = true) : t3.deltaZ() > i2.deltaZ() ? (this._overlap = t3.top - i2.z, this._overlap > this._maxOverlap || false === t3.checkCollision.down || false === i2.checkCollision.up ? this._overlap = 0 : (t3.touching.none = false, t3.touching.down = true, i2.touching.none = false, i2.touching.up = true)) : t3.deltaZ() < i2.deltaZ() && (this._overlap = t3.z - i2.top, -this._overlap > this._maxOverlap || false === t3.checkCollision.up || false === i2.checkCollision.down ? this._overlap = 0 : (t3.touching.none = false, t3.touching.up = true, i2.touching.none = false, i2.touching.down = true)), 0 !== this._overlap && (t3.overlapZ = this._overlap, i2.overlapZ = this._overlap, !!(e2 || t3.customSeparateY || i2.customSeparateZ) || (this._velocity1 = t3.velocity.z, this._velocity2 = i2.velocity.z, t3.immovable || i2.immovable ? t3.immovable ? i2.immovable || (i2.z += this._overlap, i2.velocity.z = this._velocity1 - this._velocity2 * i2.bounce.z, t3.moves && (i2.x += t3.x - t3.prev.x, i2.y += t3.y - t3.prev.y)) : (t3.z = t3.z - this._overlap, t3.velocity.z = this._velocity2 - this._velocity1 * t3.bounce.z, i2.moves && (t3.x += i2.x - i2.prev.x, t3.y += i2.y - i2.prev.y)) : (this._overlap *= 0.5, t3.z = t3.z - this._overlap, i2.z += this._overlap, this._newVelocity1 = Math.sqrt(this._velocity2 * this._velocity2 * i2.mass / t3.mass) * (this._velocity2 > 0 ? 1 : -1), this._newVelocity2 = Math.sqrt(this._velocity1 * this._velocity1 * t3.mass / i2.mass) * (this._velocity1 > 0 ? 1 : -1), this._average = 0.5 * (this._newVelocity1 + this._newVelocity2), this._newVelocity1 -= this._average, this._newVelocity2 -= this._average, t3.velocity.z = this._average + this._newVelocity1 * t3.bounce.z, i2.velocity.z = this._average + this._newVelocity2 * i2.bounce.z), true)));
        } }, { key: "overlap", value: function(t3, i2) {
          var e2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, s2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, h2 = arguments[4];
          if (h2 = h2 || e2, this._result = false, this._total = 0, Array.isArray(i2)) for (var o2 = 0, n2 = i2.length; o2 < n2; o2++) this.collideHandler(t3, i2[o2], e2, s2, h2, true);
          else this.collideHandler(t3, i2, e2, s2, h2, true);
          return this._total > 0;
        } }, { key: "collide", value: function(t3, i2) {
          var e2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, s2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, h2 = arguments[4];
          if (h2 = h2 || e2, this._result = false, this._total = 0, Array.isArray(i2)) for (var o2 = 0, n2 = i2.length; o2 < n2; o2++) this.collideHandler(t3, i2[o2], e2, s2, h2, false);
          else this.collideHandler(t3, i2, e2, s2, h2, false);
          return this._total > 0;
        } }, { key: "collideHandler", value: function(t3, i2, e2, s2, h2, o2) {
          i2 || t3.type !== Phaser.GROUP ? t3 && i2 && (t3.type === a.ISOSPRITE ? i2.type === a.ISOSPRITE ? this.collideSpriteVsSprite(t3, i2, e2, s2, h2, o2) : i2.type === Phaser.GROUP && this.collideSpriteVsGroup(t3, i2, e2, s2, h2, o2) : t3.type === Phaser.GROUP && (i2.type === a.ISOSPRITE ? this.collideSpriteVsGroup(i2, t3, e2, s2, h2, o2) : i2.type === Phaser.GROUP && this.collideGroupVsGroup(t3, i2, e2, s2, h2, o2))) : this.collideGroupVsSelf(t3, e2, s2, h2, o2);
        } }, { key: "collideSpriteVsSprite", value: function(t3, i2, e2, s2, h2, o2) {
          return !(!t3.body || !i2.body) && (this.separate(t3.body, i2.body, s2, h2, o2) && (e2 && e2.call(h2, t3, i2), this._total++), true);
        } }, { key: "collideSpriteVsGroup", value: function(t3, i2, e2, s2, h2, o2) {
          var n2, r2;
          if (0 !== i2.children.size && t3.body) if (t3.body.skipTree || this.skipTree) for (n2 = 0, r2 = i2.children.size; n2 < r2; n2++) {
            var a2 = i2.children.entries[n2];
            a2 && this.collideSpriteVsSprite(t3, a2, e2, s2, h2, o2);
          }
          else for (this.octree.clear(), this.octree.reset(this.bounds.x, this.bounds.y, this.bounds.z, this.bounds.widthX, this.bounds.widthY, this.bounds.height, this.maxObjects, this.maxLevels), this.octree.populate(i2), this._potentials = this.octree.retrieve(t3), n2 = 0, r2 = this._potentials.length; n2 < r2; n2++) this.separate(t3.body, this._potentials[n2], s2, h2, o2) && (e2 && e2.call(h2, t3, this._potentials[n2].sprite), this._total++);
        } }, { key: "collideGroupVsSelf", value: function(t3, i2, e2, s2, h2) {
          if (0 !== t3.children.size) for (var o2 = t3.children.size, n2 = 0; n2 < o2; n2++) for (var r2 = n2 + 1; r2 <= o2; r2++) {
            var a2 = t3.children.entries, l2 = a2[n2], u2 = a2[r2];
            l2 && u2 && this.collideSpriteVsSprite(l2, u2, i2, e2, s2, h2);
          }
        } }, { key: "collideGroupVsGroup", value: function(t3, i2, e2, s2, h2, o2) {
          if (0 !== t3.children.size && 0 !== i2.children.size) for (var n2 = 0, r2 = t3.children.size; n2 < r2; n2++) this.collideSpriteVsGroup(t3.children.entries[n2], i2, e2, s2, h2, o2);
        } }, { key: "updateMotion", value: function(t3, i2) {
          this._velocityDelta = this.computeVelocity(0, t3, t3.angularVelocity, t3.angularAcceleration, t3.angularDrag, t3.maxAngular) - t3.angularVelocity, t3.angularVelocity += this._velocityDelta, t3.rotation += t3.angularVelocity * i2, t3.velocity.x = this.computeVelocity(1, t3, t3.velocity.x, t3.acceleration.x, t3.drag.x, t3.maxVelocity.x, i2), t3.velocity.y = this.computeVelocity(2, t3, t3.velocity.y, t3.acceleration.y, t3.drag.y, t3.maxVelocity.y, i2), t3.velocity.z = this.computeVelocity(3, t3, t3.velocity.z, t3.acceleration.z, t3.drag.z, t3.maxVelocity.z, i2);
        } }, { key: "update", value: function(t3, i2) {
          var e2 = this.bodies.entries, s2 = e2.length, h2 = void 0;
          for (h2 = 0; h2 < s2; h2++) {
            e2[h2].enable && e2[h2].update(t3, i2);
          }
        } }, { key: "postUpdate", value: function() {
          var t3 = this.bodies.entries, i2 = t3.length, e2 = void 0;
          for (e2 = 0; e2 < i2; e2++) {
            var s2 = t3[e2];
            s2.enable && s2.postUpdate();
          }
        } }]), t2;
      })();
      i.default = y;
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true }), i.TYPE = void 0;
      var s = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), h = n(e(0)), o = n(e(1));
      function n(t2) {
        return t2 && t2.__esModule ? t2 : { default: t2 };
      }
      var r = i.TYPE = "IsoPhysics", a = (function() {
        function t2(i2) {
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.sprite = i2, this.scene = i2.scene, this.type = r, this.enable = true, this.offset = new h.default(), this.position = new h.default(i2.isoX, i2.isoY, i2.isoZ), this.prev = new h.default(this.position.x, this.position.y, this.position.z), this.allowRotation = true, this.rotation = i2.rotation, this.preRotation = i2.rotation, this.sourceWidthX = i2.width / i2.scaleX, this.sourceWidthY = i2.width / i2.scaleX, this.sourceHeight = i2.height / i2.scaleY, this.widthX = Math.ceil(0.5 * i2.width), this.widthY = Math.ceil(0.5 * i2.width), this.height = i2.height - Math.ceil(0.5 * i2.width), this.halfWidthX = Math.abs(0.5 * this.widthX), this.halfWidthY = Math.abs(0.5 * this.widthY), this.halfHeight = Math.abs(0.5 * this.height), this.center = new h.default(i2.isoX + this.halfWidthX, i2.isoY + this.halfWidthY, i2.isoZ + this.halfHeight), this.velocity = new h.default(), this.newVelocity = new h.default(), this.deltaMax = new h.default(), this.acceleration = new h.default(), this.drag = new h.default(), this.allowGravity = true, this.gravity = new h.default(), this.bounce = new h.default(), this.maxVelocity = new h.default(1e4, 1e4, 1e4), this.angularVelocity = 0, this.angularAcceleration = 0, this.angularDrag = 0, this.maxAngular = 1e3, this.mass = 1, this.angle = 0, this.speed = 0, this.facing = Phaser.NONE, this.immovable = false, this.moves = true, this.customSeparateX = false, this.customSeparateY = false, this.customSeparateZ = false, this.overlapX = 0, this.overlapY = 0, this.overlapZ = 0, this.embedded = false, this.collideWorldBounds = false, this.checkCollision = { none: false, any: true, up: true, down: true, frontX: true, frontY: true, backX: true, backY: true }, this.touching = { none: true, up: false, down: false, frontX: false, frontY: false, backX: false, backY: false }, this.wasTouching = { none: true, up: false, down: false, frontX: false, frontY: false, backX: false, backY: false }, this.blocked = { up: false, down: false, frontX: false, frontY: false, backX: false, backY: false }, this.phase = 0, this.skipTree = false, this._reset = true, this._sx = i2.scaleX, this._sy = i2.scaleY, this._dx = 0, this._dy = 0, this._dz = 0, this._corners = [new h.default(this.x, this.y, this.z), new h.default(this.x, this.y, this.z + this.height), new h.default(this.x, this.y + this.widthY, this.z), new h.default(this.x, this.y + this.widthY, this.z + this.height), new h.default(this.x + this.widthX, this.y, this.z), new h.default(this.x + this.widthX, this.y, this.z + this.height), new h.default(this.x + this.widthX, this.y + this.widthY, this.z), new h.default(this.x + this.widthX, this.y + this.widthY, this.z + this.height)];
        }
        return s(t2, [{ key: "updateBounds", value: function() {
          var t3 = Math.abs(this.sprite.scaleX), i2 = Math.abs(this.sprite.scaleY);
          t3 === this._sx && i2 === this._sy || (this.widthX = Math.ceil(0.5 * this.sprite.width), this.widthY = Math.ceil(0.5 * this.sprite.width), this.height = Math.ceil(this.sprite.height - 0.5 * this.sprite.width), this.halfWidthX = Math.floor(0.5 * this.widthX), this.halfWidthY = Math.floor(0.5 * this.widthY), this.halfHeight = Math.floor(0.5 * this.height), this._sx = t3, this._sy = i2, this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight), this._reset = true);
        } }, { key: "update", value: function(t3, i2) {
          if (this.enable) {
            if (this.phase = 1, this.wasTouching.none = this.touching.none, this.wasTouching.up = this.touching.up, this.wasTouching.down = this.touching.down, this.wasTouching.backX = this.touching.backX, this.wasTouching.backY = this.touching.backY, this.wasTouching.frontX = this.touching.frontX, this.wasTouching.frontY = this.touching.frontY, this.touching.none = true, this.touching.up = false, this.touching.down = false, this.touching.backX = false, this.touching.backY = false, this.touching.frontX = false, this.touching.frontY = false, this.blocked.up = false, this.blocked.down = false, this.blocked.frontY = false, this.blocked.frontX = false, this.blocked.backY = false, this.blocked.backX = false, this.embedded = false, this.updateBounds(), this.position.x = this.sprite.isoX + (this.widthX * -this.sprite.originX + 0.5 * this.widthX) + this.offset.x, this.position.y = this.sprite.isoY + (this.widthY * this.sprite.originX - 0.5 * this.widthY) + this.offset.y, this.position.z = this.sprite.isoZ - Math.abs(this.sprite.height) * (1 - this.sprite.originY) + Math.abs(0.5 * this.sprite.width) + this.offset.z, this.rotation = this.sprite.angle, this.preRotation = this.rotation, (this._reset || true === this.sprite.fresh) && (this.prev.x = this.position.x, this.prev.y = this.position.y, this.prev.z = this.position.z), this.moves) {
              var e2 = this.scene.sys.settings.map.isoPhysics, s2 = this.scene[e2].world;
              i2 /= 1e3, s2.updateMotion(this, i2), this.newVelocity.set(this.velocity.x * i2, this.velocity.y * i2, this.velocity.z * i2), this.position.x += this.newVelocity.x, this.position.y += this.newVelocity.y, this.position.z += this.newVelocity.z, this.position.x === this.prev.x && this.position.y === this.prev.y && this.position.z === this.prev.z || (this.speed = Math.sqrt(this.velocity.x * this.velocity.x + this.velocity.y * this.velocity.y + this.velocity.z * this.velocity.z), this.angle = Math.atan2(this.velocity.y, this.velocity.x)), this.collideWorldBounds && this.checkWorldBounds(), this.sprite.outOfBoundsKill && !s2.bounds.intersects(this.sprite.isoBounds) && this.sprite.kill();
            }
            this._dx = this.deltaX(), this._dy = this.deltaY(), this._dz = this.deltaZ(), this._reset = false;
          }
        } }, { key: "postUpdate", value: function() {
          this.enable && 2 !== this.phase && (this.phase = 2, this._reset && (this.prev.x = this.position.x, this.prev.y = this.position.y, this.prev.z = this.position.z), this.deltaAbsX() >= this.deltaAbsY() && this.deltaAbsX() >= this.deltaAbsZ() ? this.deltaX() < 0 ? this.facing = 4 : this.deltaX() > 0 && (this.facing = 2) : this.deltaAbsY() >= this.deltaAbsX() && this.deltaAbsY() >= this.deltaAbsZ() ? this.deltaY() < 0 ? this.facing = 5 : this.deltaY() > 0 && (this.facing = 3) : this.deltaZ() < 0 ? this.facing = 1 : this.deltaZ() > 0 && (this.facing = 0), this.moves && (this._dx = this.deltaX(), this._dy = this.deltaY(), this._dz = this.deltaZ(), 0 !== this.deltaMax.x && 0 !== this._dx && (this._dx < 0 && this._dx < -this.deltaMax.x ? this._dx = -this.deltaMax.x : this._dx > 0 && this._dx > this.deltaMax.x && (this._dx = this.deltaMax.x)), 0 !== this.deltaMax.y && 0 !== this._dy && (this._dy < 0 && this._dy < -this.deltaMax.y ? this._dy = -this.deltaMax.y : this._dy > 0 && this._dy > this.deltaMax.y && (this._dy = this.deltaMax.y)), 0 !== this.deltaMax.z && 0 !== this._dz && (this._dz < 0 && this._dz < -this.deltaMax.z ? this._dz = -this.deltaMax.z : this._dz > 0 && this._dz > this.deltaMax.z && (this._dz = this.deltaMax.z)), this.sprite.isoX += this._dx, this.sprite.isoY += this._dy, this.sprite.isoZ += this._dz), this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight), this.allowRotation && (this.sprite.angle += this.deltaR()), this.prev.x = this.position.x, this.prev.y = this.position.y, this.prev.z = this.position.z, this._reset = false);
        } }, { key: "destroy", value: function() {
          this.sprite = null;
        } }, { key: "checkWorldBounds", value: function() {
          var t3 = this.scene.sys.settings.map.isoPhysics, i2 = this.scene[t3].world;
          this.position.x < i2.bounds.x && i2.checkCollision.backX ? (this.position.x = i2.bounds.x, this.velocity.x *= -this.bounce.x, this.blocked.backX = true) : this.frontX > i2.bounds.frontX && i2.checkCollision.frontX && (this.position.x = i2.bounds.frontX - this.widthX, this.velocity.x *= -this.bounce.x, this.blocked.frontX = true), this.position.y < i2.bounds.y && i2.checkCollision.backY ? (this.position.y = i2.bounds.y, this.velocity.y *= -this.bounce.y, this.blocked.backY = true) : this.frontY > i2.bounds.frontY && i2.checkCollision.frontY && (this.position.y = i2.bounds.frontY - this.widthY, this.velocity.y *= -this.bounce.y, this.blocked.frontY = true), this.position.z < i2.bounds.z && i2.checkCollision.down ? (this.position.z = i2.bounds.z, this.velocity.z *= -this.bounce.z, this.blocked.down = true) : this.top > i2.bounds.top && i2.checkCollision.up && (this.position.z = i2.bounds.top - this.height, this.velocity.z *= -this.bounce.z, this.blocked.up = true);
        } }, { key: "setSize", value: function(t3, i2, e2, s2, h2, o2) {
          void 0 === s2 && (s2 = this.offset.x), void 0 === h2 && (h2 = this.offset.y), void 0 === o2 && (o2 = this.offset.z), this.sourceWidthX = t3, this.sourceWidthY = i2, this.sourceHeight = e2, this.widthX = this.sourceWidthX * this._sx, this.widthY = this.sourceWidthY * this._sx, this.height = this.sourceHeight * this._sy, this.halfWidthX = Math.floor(0.5 * this.widthX), this.halfWidthY = Math.floor(0.5 * this.widthY), this.halfHeight = Math.floor(0.5 * this.height), this.offset.setTo(s2, h2, o2), this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight);
        } }, { key: "reset", value: function(t3, i2, e2) {
          this.velocity.set(0), this.acceleration.set(0), this.angularVelocity = 0, this.angularAcceleration = 0, this.position.x = t3 + (this.widthX * -this.sprite.anchor.x + 0.5 * this.widthX) + this.offset.x, this.position.y = i2 + (this.widthY * this.sprite.anchor.x - 0.5 * this.widthY) + this.offset.y, this.position.z = e2 - Math.abs(this.sprite.height) * (1 - this.sprite.anchor.y) + Math.abs(0.5 * this.sprite.width) + this.offset.z, this.prev.x = this.position.x, this.prev.y = this.position.y, this.prev.z = this.position.z, this.rotation = this.sprite.angle, this.preRotation = this.rotation, this._sx = this.sprite.scaleX, this._sy = this.sprite.scaleY, this.center.setTo(this.position.x + this.halfWidthX, this.position.y + this.halfWidthY, this.position.z + this.halfHeight), this.sprite._isoPositionChanged = true;
        } }, { key: "hitTest", value: function(t3, i2, e2) {
          return o.default.contains(this, t3, i2, e2);
        } }, { key: "onFloor", value: function() {
          return this.blocked.down;
        } }, { key: "onWall", value: function() {
          return this.blocked.frontX || this.blocked.frontY || this.blocked.backX || this.blocked.backY;
        } }, { key: "deltaAbsX", value: function() {
          return this.deltaX() > 0 ? this.deltaX() : -this.deltaX();
        } }, { key: "deltaAbsY", value: function() {
          return this.deltaY() > 0 ? this.deltaY() : -this.deltaY();
        } }, { key: "deltaAbsZ", value: function() {
          return this.deltaZ() > 0 ? this.deltaZ() : -this.deltaZ();
        } }, { key: "deltaX", value: function() {
          return this.position.x - this.prev.x;
        } }, { key: "deltaY", value: function() {
          return this.position.y - this.prev.y;
        } }, { key: "deltaZ", value: function() {
          return this.position.z - this.prev.z;
        } }, { key: "deltaR", value: function() {
          return this.rotation - this.preRotation;
        } }, { key: "getCorners", value: function() {
          return this._corners[0].setTo(this.x, this.y, this.z), this._corners[1].setTo(this.x, this.y, this.z + this.height), this._corners[2].setTo(this.x, this.y + this.widthY, this.z), this._corners[3].setTo(this.x, this.y + this.widthY, this.z + this.height), this._corners[4].setTo(this.x + this.widthX, this.y, this.z), this._corners[5].setTo(this.x + this.widthX, this.y, this.z + this.height), this._corners[6].setTo(this.x + this.widthX, this.y + this.widthY, this.z), this._corners[7].setTo(this.x + this.widthX, this.y + this.widthY, this.z + this.height), this._corners;
        } }, { key: "debugRender", value: function(t3) {
          var i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "rgba(0,255,0,0.4)", e2 = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], s2 = [], h2 = this.getCorners(), o2 = -this.scene.cameras.main.x, n2 = -this.scene.cameras.main.y, r2 = this.scene.sys.settings.map.isoPlugin, a2 = this.scene[r2].projector;
          if (e2) {
            s2 = (s2 = [h2[1], h2[3], h2[2], h2[6], h2[4], h2[5], h2[1]]).map(function(t4) {
              var i3 = a2.project(t4);
              return i3.x += o2, i3.y += n2, i3;
            }), t3.beginPath(), t3.fillStyle = i2, t3.moveTo(s2[0].x, s2[0].y);
            for (var l = 1; l < s2.length; l++) t3.lineTo(s2[l].x, s2[l].y);
            t3.fill();
          } else s2 = (s2 = h2.slice(0, h2.length)).map(function(t4) {
            var i3 = a2.project(t4);
            return i3.x += o2, i3.y += n2, i3;
          }), t3.moveTo(s2[0].x, s2[0].y), t3.beginPath(), t3.strokeStyle = i2, t3.lineTo(s2[1].x, s2[1].y), t3.lineTo(s2[3].x, s2[3].y), t3.lineTo(s2[2].x, s2[2].y), t3.lineTo(s2[6].x, s2[6].y), t3.lineTo(s2[4].x, s2[4].y), t3.lineTo(s2[5].x, s2[5].y), t3.lineTo(s2[1].x, s2[1].y), t3.lineTo(s2[0].x, s2[0].y), t3.lineTo(s2[4].x, s2[4].y), t3.moveTo(s2[0].x, s2[0].y), t3.lineTo(s2[2].x, s2[2].y), t3.moveTo(s2[3].x, s2[3].y), t3.lineTo(s2[7].x, s2[7].y), t3.lineTo(s2[6].x, s2[6].y), t3.moveTo(s2[7].x, s2[7].y), t3.lineTo(s2[5].x, s2[5].y), t3.stroke(), t3.closePath();
        } }, { key: "top", get: function() {
          return this.position.z + this.height;
        } }, { key: "frontX", get: function() {
          return this.position.x + this.widthX;
        } }, { key: "right", get: function() {
          return this.position.x + this.widthX;
        } }, { key: "frontY", get: function() {
          return this.position.y + this.widthY;
        } }, { key: "bottom", get: function() {
          return this.position.y + this.widthY;
        } }, { key: "x", get: function() {
          return this.position.x;
        }, set: function(t3) {
          this.position.x = t3;
        } }, { key: "y", get: function() {
          return this.position.y;
        }, set: function(t3) {
          this.position.y = t3;
        } }, { key: "z", get: function() {
          return this.position.z;
        }, set: function(t3) {
          this.position.z = t3;
        } }]), t2;
      })();
      i.default = a;
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true });
      var s, h = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), o = e(1), n = (s = o) && s.__esModule ? s : { default: s };
      var r = (function() {
        function t2(i2, e2, s2, h2, o2, n2, r2, a, l) {
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.maxObjects = 10, this.maxLevels = 4, this.level = 0, this.bounds = {}, this.objects = [], this.nodes = [], this._empty = [], this.reset(i2, e2, s2, h2, o2, n2, r2, a, l);
        }
        return h(t2, [{ key: "reset", value: function(t3, i2, e2, s2, h2, o2, n2, r2, a) {
          this.maxObjects = n2 || 10, this.maxLevels = r2 || 4, this.level = a || 0, this.bounds = { x: Math.round(t3), y: Math.round(i2), z: Math.round(e2), widthX: s2, widthY: h2, height: o2, subWidthX: Math.floor(0.5 * s2), subWidthY: Math.floor(0.5 * h2), subHeight: Math.floor(0.5 * o2), frontX: Math.round(t3) + Math.floor(0.5 * s2), frontY: Math.round(i2) + Math.floor(0.5 * h2), top: Math.round(e2) + Math.floor(0.5 * o2) }, this.objects.length = 0, this.nodes.length = 0;
        } }, { key: "populate", value: function(t3) {
          for (var i2 = t3.children.size, e2 = t3.children.entries, s2 = 0; s2 < i2; s2++) this.populateHandler(e2[s2]);
        } }, { key: "populateHandler", value: function(t3) {
          t3.body && this.insert(t3.body);
        } }, { key: "split", value: function() {
          this.nodes[0] = new t2(this.bounds.x, this.bounds.y, this.bounds.z, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1), this.nodes[1] = new t2(this.bounds.frontX, this.bounds.y, this.bounds.z, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1), this.nodes[2] = new t2(this.bounds.x, this.bounds.frontY, this.bounds.z, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1), this.nodes[3] = new t2(this.bounds.frontX, this.bounds.frontY, this.bounds.z, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1), this.nodes[4] = new t2(this.bounds.x, this.bounds.y, this.bounds.top, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1), this.nodes[5] = new t2(this.bounds.frontX, this.bounds.y, this.bounds.top, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1), this.nodes[6] = new t2(this.bounds.x, this.bounds.frontY, this.bounds.top, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1), this.nodes[7] = new t2(this.bounds.frontX, this.bounds.frontY, this.bounds.top, this.bounds.subWidthX, this.bounds.subWidthY, this.bounds.subHeight, this.maxLevels, this.level + 1);
        } }, { key: "insert", value: function(t3) {
          var i2, e2 = 0;
          if (null == this.nodes[0] || -1 == (i2 = this.getIndex(t3))) {
            if (this.objects.push(t3), this.objects.length > this.maxObjects && this.level < this.maxLevels) for (null == this.nodes[0] && this.split(); e2 < this.objects.length; ) -1 != (i2 = this.getIndex(this.objects[e2])) ? this.nodes[i2].insert(this.objects.splice(e2, 1)[0]) : e2++;
          } else this.nodes[i2].insert(t3);
        } }, { key: "getIndex", value: function(t3) {
          var i2 = -1;
          return t3.x < this.bounds.frontX && t3.frontX < this.bounds.frontX ? t3.y < this.bounds.frontY && t3.frontY < this.bounds.frontY ? t3.z < this.bounds.top && t3.top < this.bounds.top ? i2 = 0 : t3.z > this.bounds.top && (i2 = 4) : t3.y > this.bounds.frontY && (t3.z < this.bounds.top && t3.top < this.bounds.top ? i2 = 2 : t3.z > this.bounds.top && (i2 = 6)) : t3.x > this.bounds.frontX && (t3.y < this.bounds.frontY && t3.frontY < this.bounds.frontY ? t3.z < this.bounds.top && t3.top < this.bounds.top ? i2 = 1 : t3.z > this.bounds.top && (i2 = 5) : t3.y > this.bounds.frontY && (t3.z < this.bounds.top && t3.top < this.bounds.top ? i2 = 3 : t3.z > this.bounds.top && (i2 = 7))), i2;
        } }, { key: "retrieve", value: function(t3) {
          var i2, e2;
          if (t3 instanceof n.default) i2 = this.objects, e2 = this.getIndex(t3);
          else {
            if (!t3.body) return this._empty;
            i2 = this.objects, e2 = this.getIndex(t3.body);
          }
          return this.nodes[0] && (i2 = -1 !== e2 ? i2.concat(this.nodes[e2].retrieve(t3)) : (i2 = (i2 = (i2 = (i2 = (i2 = (i2 = (i2 = i2.concat(this.nodes[0].retrieve(t3))).concat(this.nodes[1].retrieve(t3))).concat(this.nodes[2].retrieve(t3))).concat(this.nodes[3].retrieve(t3))).concat(this.nodes[4].retrieve(t3))).concat(this.nodes[5].retrieve(t3))).concat(this.nodes[6].retrieve(t3))).concat(this.nodes[7].retrieve(t3))), i2;
        } }, { key: "clear", value: function() {
          this.objects.length = 0;
          for (var t3 = this.nodes.length; t3--; ) this.nodes[t3].clear(), this.nodes.splice(t3, 1);
          this.nodes.length = 0;
        } }]), t2;
      })();
      i.default = r;
    }, function(t, i, e) {
      "use strict";
      Object.defineProperty(i, "__esModule", { value: true }), i.MILITARY = i.ISOMETRIC = i.CLASSIC = void 0;
      var s, h = /* @__PURE__ */ (function() {
        function t2(t3, i2) {
          for (var e2 = 0; e2 < i2.length; e2++) {
            var s2 = i2[e2];
            s2.enumerable = s2.enumerable || false, s2.configurable = true, "value" in s2 && (s2.writable = true), Object.defineProperty(t3, s2.key, s2);
          }
        }
        return function(i2, e2, s2) {
          return e2 && t2(i2.prototype, e2), s2 && t2(i2, s2), i2;
        };
      })(), o = e(0), n = (s = o) && s.__esModule ? s : { default: s };
      var r = Phaser.Geom.Point, a = i.CLASSIC = Math.atan(0.5), l = (i.ISOMETRIC = Math.PI / 6, i.MILITARY = Math.PI / 4, (function() {
        function t2(i2, e2) {
          !(function(t3, i3) {
            if (!(t3 instanceof i3)) throw new TypeError("Cannot call a class as a function");
          })(this, t2), this.scene = i2, this._transform = null, this._projectionAngle = 0, this.projectionAngle = e2 || a, this.origin = new r(0.5, 0.5);
        }
        return h(t2, [{ key: "project", value: function(t3) {
          var i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new r();
          i2.x = (t3.x - t3.y) * this._transform[0], i2.y = (t3.x + t3.y) * this._transform[1] - t3.z;
          var e2 = this.scene.sys.game.config, s2 = e2.width, h2 = e2.height;
          return i2.x += s2 * this.origin.x, i2.y += h2 * this.origin.y, i2;
        } }, { key: "projectXY", value: function(t3) {
          var i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new r();
          return i2.x = (t3.x - t3.y) * this._transform[0], i2.y = (t3.x + t3.y) * this._transform[1], i2.x += this.game.world.width * this.origin.x, i2.y += this.game.world.height * this.origin.y, i2;
        } }, { key: "unproject", value: function(t3) {
          var i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new n.default(), e2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, s2 = t3.x - this.game.world.x - this.game.world.width * this.origin.x, h2 = t3.y - this.game.world.y - this.game.world.height * this.origin.y + e2;
          return i2.x = s2 / (2 * this._transform[0]) + h2 / (2 * this._transform[1]), i2.y = -s2 / (2 * this._transform[0]) + h2 / (2 * this._transform[1]), i2.z = e2, i2;
        } }, { key: "projectionAngle", set: function(t3) {
          t3 !== this._projectionAngle && (this._projectionAngle = t3, this._transform = [Math.cos(this._projectionAngle), Math.sin(this._projectionAngle)]);
        }, get: function() {
          return this._projectionAngle;
        } }]), t2;
      })());
      i.default = l;
    }]);
  }
});
export default require_phaser_plugin_isometric();
/*! Bundled license information:

phaser3-plugin-isometric/dist/phaser-plugin-isometric.js:
  (**
   * @author       Lewis Lane <lew@rotates.org>
   * @copyright    2015 Lewis Lane (Rotates.org)
   * @license      {@link http://opensource.org/licenses/MIT|MIT License}
   *)
*/
//# sourceMappingURL=phaser3-plugin-isometric.js.map
